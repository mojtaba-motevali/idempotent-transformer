// version of protocol buffer used
syntax = "proto3";

// package name for the buffer will be used later
package workflow_service;

// service which can be executed
service WorkflowServiceImpl {
    // function which can be called
    rpc lease_workflow(LeaseWorkflowRequest) returns (LeaseWorkflowResponse);
    rpc checkpoint(CheckPointRequest) returns (CheckPointResponse);
    rpc lease_checkpoint(LeaseCheckpointRequest) returns (LeaseCheckpointResponse);
    rpc complete_workflow(CompleteWorkflowRequest) returns (CompleteWorkflowResponse);
}



message LeaseWorkflowRequest {
    string workflow_id = 1;
    bool is_nested = 2;
    bool prefetch_checkpoints = 3;
    string context_name = 4;
}

message LeaseWorkflowResponse {
    map<string, bytes> checkpoints = 1;
    int64 fencing_token = 2;
    int64 total_context_bound_checkpoints = 3;
}

// argument
message CheckPointRequest {
// data type and position of data
    string workflow_id = 1;
    bytes value = 2;
    int64 fencing_token = 3;
    int64 position_checksum = 4;
    // for readability
    string workflow_context_name = 5;
    string checkpoint_context_name = 6;
}

// return value
message CheckPointResponse {
    bool abort = 1;
}


message LeaseCheckpointRequest {
    string workflow_id = 1;
    int64 fencing_token = 2;
    int64 lease_timeout = 3;
    int64 position_checksum = 4;
}

message LeaseCheckpointResponse {
    oneof response {
        bytes value = 1;
    }
}

message CompleteWorkflowRequest {
    string workflow_id = 1;
    int64 expire_after = 2;
    int64 fencing_token = 3;
}

message CompleteWorkflowResponse {}